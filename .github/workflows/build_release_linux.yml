name: Build Release

on:
  # allow manual running of this job
  workflow_dispatch:
      
jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build
      id: build
      run: |
        python3 build.py --install-assets --install-dependencies --archive-name=projectfarm_linux
        echo '::set-output name=VERSION::'$(python3 ./.github/tools/getversion.py)
      
    - name: Release Version
      id: version
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: linux_version_${{ steps.build.outputs.VERSION }}
        release_name: linux_version_${{ steps.build.outputs.VERSION }}
        draft: false
        prerelease: false
      
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.nightly.outputs.upload_url }}
        asset_path: ./archives/projectfarm_linux.zip
        asset_name: projectfarm_linux_${{ steps.build.outputs.VERSION }}.zip
        asset_content_type: application/zip
      
  # build_windows:
  #   runs-on: windows-latest

  #   steps:
  #   - uses: actions/checkout@v2

  #   # `build.py` requires python 3.8 minimum
  #   - name: Setup Python
  #     uses: actions/setup-python@v2.2.2
  #     with:
  #       python-version: 3.8

  #   - name: Build
  #     id: build
  #     run: |
  #       python3 build.py --install-assets --install-dependencies --archive-name=projectfarm_windows
  #       echo "::set-output name=RELEASE_DATE::$(python3 ./.github/tools/getdate.py)"
      
  #   - name: Release Nightly
  #     id: nightly
  #     uses: actions/create-release@latest
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: windows_nightly_${{ steps.build.outputs.RELEASE_DATE }}
  #       release_name: windows_nightly_${{ steps.build.outputs.RELEASE_DATE }}
  #       draft: false
  #       prerelease: false
      
  #   - name: Upload Release Asset
  #     id: upload-release-asset 
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.nightly.outputs.upload_url }}
  #       asset_path: ./archives/projectfarm_windows.zip
  #       asset_name: windows_nightly_${{ steps.build.outputs.RELEASE_DATE }}.zip
  #       asset_content_type: application/zip
      
  # build_mac:
  #   runs-on: macos-latest

  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: Build
  #     id: build
  #     run: |
  #       python3 build.py --install-assets --install-dependencies --archive-name=projectfarm_mac
  #       echo '::set-output name=RELEASE_DATE::'$(python3 ./.github/tools/getdate.py)
      
  #   - name: Release Nightly
  #     id: nightly
  #     uses: actions/create-release@latest
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: mac_nightly_${{ steps.build.outputs.RELEASE_DATE }}
  #       release_name: mac_nightly_${{ steps.build.outputs.RELEASE_DATE }}
  #       draft: false
  #       prerelease: false
      
  #   - name: Upload Release Asset
  #     id: upload-release-asset 
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.nightly.outputs.upload_url }}
  #       asset_path: ./archives/projectfarm_mac.zip
  #       asset_name: mac_nightly_${{ steps.build.outputs.RELEASE_DATE }}.zip
  #       asset_content_type: application/zip
